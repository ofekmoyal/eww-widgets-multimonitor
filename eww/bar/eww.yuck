;; Variables
(defpoll clock_time :interval "1m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "5m" "date '+%d/%m'")
(defpoll volume_percent :interval "3s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2 * 100}'")
(defpoll mic_percent :interval "3s" "wpctl get-volume @DEFAULT_AUDIO_SOURCE@ | awk '{print $2 * 100}'")
(defpoll brightness :interval "5s" "brightnessctl -m -d amdgpu_bl2 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll battery :interval "15s" "battery --bat")
(defpoll battery_status :interval "1m" "battery --bat-st")
(defpoll memory :interval "15s" "memory")
(defpoll memory_used_mb :interval "2m" "mem-ad used")
(defpoll memory_total_mb :interval "2m" "mem-ad total")
(defpoll memory_free_mb :interval "2m" "mem-ad free")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten wrkspcs :initial '[{"id": 1, "status": 1}]' `test_workspace`)
(defvar is_workspace_empty false)
(deflisten current_workspace :initial "1" `poll_workspace`)

(defvar eww "eww")


(defpoll COL_WLAN :interval "1m" "wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "wifi --ICON")


(defpoll song :interval "2s"  "music_info --song")
(defpoll song_artist :interval "2s"  "music_info --artist")
(defpoll song_time :interval "1s"  "music_info --time")
(defpoll song_status :interval "2s"  "music_info --status")
(defpoll cover_art :interval "2s"  "music_info --cover")
(defpoll loop_status :interval "5s"  "~/.config/eww/leftbar/scripts/music_info --loop_ic")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;;define for leftbar
(defvar IMAGE "images/profile.png")
(defpoll username :interval "48h"  "whoami")

(defpoll uptime :interval "50s" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ hour,/h/;s/ minutes/m/;s/ minute/m/'")

(defpoll time_hour :interval "5m"
       "date +\"%H\"")
(defpoll time_year :interval "5m"
       "date +\"%C\"")
(defpoll time_min :interval "5s"
       "date +\"%M\"")
(defpoll time_mer :interval "12h"
        "date +\"%p\"")
(defpoll time_day :interval "30m"
       "date +\"%d\"")
(defpoll time_month :interval "48h"
      "date +\%m")
(defpoll time_day_name :interval "30m"
       "date +\"%A\"")
(defpoll time_month_name :interval "48h"
      "date +\%B")

(defpoll cpu :interval "17s" "cpu")


(defpoll wifi_icon :interval "15s" "wifi2 wifi")
(defpoll wifi_col :interval "15s" "wifi2 wifi_col")
(defpoll wifi_bg :interval "17s" "wifi2 wifi_bg")

(defpoll notif_icon :interval "15s" "notifs notifs")
(defpoll notif_col :interval "15s" "notifs notifs_col")
(defpoll notif_bg :interval "17s" "notifs notifs_bg")


(defpoll vol_icon :interval "15s" "vol vol")
(defpoll vol_col :interval "15s" "vol vol_col")
(defpoll vol_bg :interval "17s" "vol vol_bg")


;; widgets
(defwidget bluetooth []
  (box :vexpand "false" :hexpand "false" 
    (button :class "module-wif"
                        :onclick "hyprctl dispatch exec '[float; maxsize 2400 1200] ghostty -e bluetui'"
      :style "color: ${COL_WLAN};" ""
)))

(defwidget wifi []
  (eventbox :onhover "eww update wifi_rev=true"
			  :onhoverlost "eww update wifi_rev=false"
		(box :vexpand "false" :hexpand "false" :space-evenly "false"
				(button :class "module-wif"
                        :onclick "hyprctl dispatch exec '[float; maxsize 2400 1200] ghostty -e impala'"
                        :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
	(revealer :transition "slidedown"
			  :reveal wifi_rev
			  :duration "350ms"))))
;	(label    :class "module_essid"
;			  :text ESSID_WLAN
;			  :orientation "v"
;			  )))))


(defwidget workspaces []
  (box :class "works" :orientation "h" :spacing 5 :space-evenly false
  (for item in wrkspcs
    (button
        :onclick "hyprctl dispatch workspace ${item.id}; eww update current_workspace=${item.id};"
        :class {(current_workspace == item.id) ? "m011" : ((item.status == 1) ? "m01" : "m0")}
        {(current_workspace == item.id) ? "" : ""}))
  )
)


(defwidget bat []
		(box :class "bat_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value battery
                :class "batbar"
                :thickness 4
            (button 
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :show_truncated false
                :onclick "pop system"
                :wrap false
                ""))))


(defwidget mem []
		(box :class "mem_module" :vexpand "false"
             :hexpand "false" :width 5
            (circular-progress :value memory
                :class "membar"
                :thickness 4
            (button
                :class "iconmem"
                ;:limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "pop system"
                :show_truncated false
                :wrap false
                ""))))



(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
			  :onhoverlost "eww update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3" 
      (label :text clock_time :class "clock_time_class" )
      (label :text "󰇙" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
	  (revealer :transition "slideleft"
			  :reveal time_rev
			  :duration "350ms"
      (button :class "clock_date_class"
             :onclick "pop calendar" clock_date
        )
  ))))
  
(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
			  :onhoverlost "eww update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
	(button   :onclick "pop audio"   :class "volume_icon" "󰓃")
	(revealer :transition "slideleft"
			  :reveal vol_reveal
			  :duration "350ms"
	(scale    :class "volbar"
			  :value volume_percent
			  :orientation "h"
			  :tooltip "${volume_percent}%"
			  :max 100
			  :min 0
			  :onchange "amixer -D pulse sset Master {}%" )))))

(defwidget bright []
  (eventbox :onhover "eww update br_reveal=true" :onhoverlost "eww update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text "󰃝" :class "bright_icon" :tooltip "brightness")
	(revealer :transition "slideleft"
			  :reveal br_reveal
			  :duration "350ms"
	(scale    :class "brightbar"
			  :value brightness
			  :orientation "h"
			  :tooltip "${brightness}%"
			  :max 100
			  :min 0
			  :onchange "brightnessctl set {}%" )))))



	;;  Music 
(defwidget music []
  (eventbox :onhover "eww update music_reveal=true"
			  :onhoverlost "eww update music_reveal=false"
		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
			(button :class "song" :onclick "pop music" song)
	    (revealer :transition "slideright"
			      :reveal music_reveal
			      :duration "350ms"
          (box :vexpand "false" :hexpand "false" :orientation "h" 
                    (button :class "song_btn_prev" :onclick "music_info --prev" "")
					(button :class "song_btn_play" :onclick "music_info --toggle" song_status)
					(button :class "song_btn_next" :onclick "music_info --next" ""))))))



(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "left_modules"
(bright)
(volume)
(bluetooth)
(wifi)
(sep)
(bat)
(mem)
(sep)
(clock_module)))


(defwidget right []
	(box :orientation "h"
		 :space-evenly false
         :hexpand true
         :halign "start"
		 :class "right_modules"
(workspaces)))


(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(music)))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
  (right)
  (center)
  (left)
    ))

(defwindow bar
    :monitor 0
          :geometry (geometry :x "0%"
                       :y "0px"
                       :width "100%"
                       :height "30px"
                       :anchor "top center")
    :exclusive true
    :focusable false
    :namespace "topbar"
    :stacking "fg"
    :windowtype "dock"
  (bar_1))
  
(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day 
			  :year calendar_year))))

(defwindow calendar
	:geometry (geometry :x "-20px" 
						:y "7%" 
                        :anchor "top right"
						:width "270px" 
						:height "60px")
(cal))



(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "speaker_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value volume_percent
              :space-evenly "false"
			  :orientation "h"
			  :onchange "amixer -D pulse sset Master {}%" 
              :tooltip "volume on ${volume_percent}%"
			  :max 100
			  :min 0))))
            (label :text "" :class "audio_sep" :halign "center")
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
              :space-evenly "false"
			  :orientation "h"
              :tooltip "mic on ${mic_percent}%"
			  :onchange "amixer -D pulse sset Capture {}%" 
			  :max 100
			  :min 0))))))

(defwindow audio_ctl
	:geometry (geometry :x "-20px" 
						:y "7%" 
                        :anchor "top right"
						:width "280px" 
						:height "60px")
(audio))


(defwindow system
	:geometry (geometry :x "-20px" 
						:y "7%" 
                        :anchor "top right"
						:width "290px" 
						:height "120px")
(system))



;;  Music
(defwidget music_pop []
		(box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
			(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
				(label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
				(box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
					(button :class "music_btn_prev" :onclick "music_info --prev" "")
					(button :class "music_btn_play" :onclick "music_info --toggle" song_status)
					(button :class "music_btn_next" :onclick "music_info --next" ""))
				(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
					(scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value song_time)))))


;;  music
		(defwindow music_win :stacking "fg" :focusable "false" :screen 0
			    :geometry (geometry :x "0" :y "2%" :width 528 :height 104 :anchor "top center")
			     				(music_pop))

;;;;;   leftbar now
(defwidget profile []
  (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(box :class "profile_picture" :halign "center" :style "background-image: url('${IMAGE});")))

(defwidget time [] 
		(box  
             :orientation "v" 
             :space-evenly "false" 
             :vexpand "false" 
             :hexpand "false" 
             :spacing 0
		(box  
             :orientation "h" 
             :space-evenly "false" 
             :vexpand "false" 
             :halign "start"
             :hexpand "false" 
             :spacing 0
			 (label :class "hour_class" 
                    :valign "start" 
                    :halign "start"
                    :wrap "true" 
                    :limit-width 25 
                    :text time_hour)
			 (label :class "minute_class" 
                    :valign "start" 
                    :halign "start" 
                    :wrap "true" 
                    :limit-width 25 
                    :text time_min)
			 (label :class "mer_class" 
                    :valign "start" 
                    :halign "start" 
                    :wrap "true" 
                    :text time_mer))
            (box :orientation "h" 
              :spacing 0 
              :space-evenly "false" 
              :halign "start"
              :vexpand "false" :hexpand "false" 
			  (label :class "day_class" 
                     :valign "start" 
                     :text time_day)
			  (label :class "time_sep"
                     :valign "start" 
                     :text " ")
			  (label :class "month_class" 
                     :valign "start" 
                     :text time_month)
			  (label :class "year_class" 
                     :valign "start" 
                     :text time_year))
            (box :orientation "h" 
              :spacing 0 
              :space-evenly "false" 
              :halign "start"
              :vexpand "false" :hexpand "false" 
			  (label :class "day_class_n" 
                     :valign "start" 
                     :text time_day_name)
			  (label :class "time_sep_class"
                     :valign "start" 
                     :text ", ")
			  (label :class "month_class_n" 
                     :valign "start" 
                     :text time_month_name))))

(defwidget music_left []
		(box :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :orientation "v" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" :class "msc_bg"
				(label :halign "start" :class "song" :wrap "false" :limit-width 12 :text song)
				(label :halign "start" :class "song_artist" :wrap "true" :limit-width 15 :text song_artist))))

(defwidget music_ctl []
				(box :orientation "v" :spacing 1 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" :class "msc_ctl_bg"
					(button :class "song_btn_prev" :onclick "music_info --prev" "")
					(button :class "song_btn_play" :onclick "music_info --toggle" song_status)
					(button :class "song_btn_next" :onclick "music_info --next" "")
					(button :class "song_btn_loop" :onclick "music_info --loop" loop_status)))

(defwidget music_prog []
			(box :orientation "v" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" :class "music_prog_bg"
				(scale :value song_time :halign "start" :class "song_prog")))

(defwidget main []
  (box :class "bg" :orientation "h" :space-evenly "false"))

(defwidget sep []
  (box :class "sep_left" :orientation "h" :space-evenly "false"))


(defwidget system_left []
  (box :class "sys_win" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 13 
      (box :class "sys_bat_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 100
            (label :text " "
                :class "cc_cc"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (label :text "BAT"
                :class "sys_icon_bat"
                :limit-width 4
                :show_truncated false
                :wrap false))
      (box :class "sys_cpu_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value cpu
                :class "sys_cpu"
                :thickness 100
            (label :text " "
                :class "cc_cc"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (label :text "CPU"
                :class "sys_icon_cpu"
                :limit-width 4
                :show_truncated false
                :wrap false))
      (box :class "sys_mem_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 100
            (label :text " "
                :class "cc_cc"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (label :text "MEM"
                :class "sys_icon_mem"
                :limit-width 4
                :show_truncated false
                   :wrap false))))

		(defwidget audio_left []
			(box :vexpand "false" :hexpand "false"
				(box :orientation "h" :spacing 25 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
					(box :class "volume_bar" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
                            (scale :flipped "true" :orientation "v" :min 0 :max 101 :value volume_percent :onchange "amixer -D pulse sset Master {}%" )
                            (label  :text "" :class "vol_icon"))
					(box :class "mic_bar" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
                            (scale :flipped "true" :orientation "v" :min 0 :max 101 :value mic_percent :active "false")
                            (label  :text "" :class "mic_icon")))))


(defwidget sustray []
  (box :class "sus_tray" :valign "center"  :space-evenly "false" :orientation "h"
    (box :orientation "h" :hexpand "false" :vexpand "false" :space-evenly "false"
      (button :class "wifi_but" :onclick "networkmanager_dmenu" :style "color: ${wifi_col}; background-color: ${wifi_bg};"  wifi_icon)
      (button :class "notif_but" :onclick "dunstctl set-paused toggle" :style "color: ${notif_col}; background-color: ${notif_bg};"  notif_icon))
    (box :orientation "h" :hexpand "false" :vexpand "false" :space-evenly "false"
      (button :class "vol_but" :onclick "amixer -D pulse set Master toggle" :style "color: ${vol_col}; background-color: ${vol_bg};"  vol_icon)
      (button :class "log_but" :onclick "bspc quit" "")
      (button :class "log_but" :onclick "poweroff" ""))))

(defwidget stats []
  (box :orientation "h" :space-evenly "false"
;;    (label :class "br_icon" :text "")
	  (box :class "bright" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
          (scale :orientation "h" :min 0 :max 100 :value brightness :onchange "brightnessctl set {}%" ))))

(defwindow main
  :monitor 0
    :geometry (geometry :anchor "left center"
               :width "500px"
               :height "90%"
               :x "0px"
               :y "20px")
  (main))


;(defwindow pfp
;  :geometry (geometry :anchor "left top"
;             :width "190px"
;             :height "23"
;             :x "0px"
;             :y "65px")
;  (profile))
;
;
;(defwindow time
;  :geometry (geometry :anchor "left top"
;             :width "260px"
;             :height "100"
;             :x "220px"
;             :y "100px")
;  (time))
;
;
;(defwindow song :stacking "fg" :focusable "false" :screen 1
;  :geometry (geometry 
;             :width "260px"
;             :height "140px"
;             :x "0px"
;             :y "300px")
;  (music_left))
;
;(defwindow song_ctl :stacking "fg" :focusable "false" :screen 1
;  :geometry (geometry 
;             :width "70px"
;             :height "187px"
;             :x "270px"
;             :y "310px")
;  (music_ctl))
;
;
;(defwindow song_prog :stacking "fg" :focusable "false" :screen 1
;  :geometry (geometry 
;             :width "250px"
;             :height "30px"
;             :x "10px"
;             :y "460px")
;  (music_prog))
;
;(defwindow seper :stacking "fg" :focusable "false" :screen 1
;  :geometry (geometry 
;             :width "420px"
;             :height "2px"
;             :x "25px"
;             :y "270px")
;  (sep))
;
;
;(defwindow sys_usg
;  :geometry (geometry
;             :width "420px"
;             :height "160px"
;             :x "10px"
;             :y "510px")
;  (system_left))
;
;
;
;(defwindow audio
;  :geometry (geometry
;             :width "0px"
;             :height "160px"
;             :x "370px"
;             :y "307px")
;  (audio_left))
;
;
;(defwindow sys_tray
;  :geometry (geometry
;             :width "100px"
;             :height "120px"
;             :x "15px"
;             :y "730px")
;  (sustray))
;
;
;(defwindow quote
;  :geometry (geometry
;             :width "295px"
;             :height "10px"
;             :x "5px"
;             :y "695px")
;  (stats))
; 
